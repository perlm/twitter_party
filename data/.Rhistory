'&client_secret=',
Sys.getenv("seatgeek_secret"),sep="")
raw <- fromJSON(q)
data <- raw$events
data
q <- paste('https://api.seatgeek.com/2/events?type=nba&per_page=250&client_id=',
Sys.getenv("seatgeek_client_ID"),
'&client_secret=',
Sys.getenv("seatgeek_secret"),sep="")
raw <- fromJSON(q)
data <- raw$events
head(data)
data$datetime_local
q <- paste('https://api.seatgeek.com/2/events?type=nba&per_page=250&page=2&client_id=',
Sys.getenv("seatgeek_client_ID"),
'&client_secret=',
Sys.getenv("seatgeek_secret"),sep="")
raw <- fromJSON(q)
data <- raw$events
raw
raw$meta
raw$meta$total
rows <- raw$meta$total
q <- paste('https://api.seatgeek.com/2/events?type=nba&per_page=1000&page=2&client_id=',
Sys.getenv("seatgeek_client_ID"),
'&client_secret=',
Sys.getenv("seatgeek_secret"),sep="")
raw <- fromJSON(q)
data <- raw$events
data
q <- paste('https://api.seatgeek.com/2/events?type=nba&per_page=1000&page=2&client_id=',
Sys.getenv("seatgeek_client_ID"),
'&client_secret=',
Sys.getenv("seatgeek_secret"),sep="")
raw <- fromJSON(q)
data <- raw$events
q <- paste('https://api.seatgeek.com/2/events?type=nba&per_page=1000&page=2&client_id=',
Sys.getenv("seatgeek_client_ID"),
'&client_secret=',
Sys.getenv("seatgeek_secret"),sep="")
raw <- fromJSON(q)
data <- raw$events
raw
q <- paste('https://api.seatgeek.com/2/events?type=nba&per_page=500&page=2&client_id=',
Sys.getenv("seatgeek_client_ID"),
'&client_secret=',
Sys.getenv("seatgeek_secret"),sep="")
raw <- fromJSON(q)
data <- raw$events
q <- paste('https://api.seatgeek.com/2/events?type=nba&per_page=1000&page=1&client_id=',
Sys.getenv("seatgeek_client_ID"),
'&client_secret=',
Sys.getenv("seatgeek_secret"),sep="")
raw <- fromJSON(q)
data <- raw$events
head(data)
colnames(data)
require(lubridate)
colnames(data)
data$game_date <- as.Date(data$datetime_local)
head(data$game_date)
tail(data$game_date)
data
head(data)
data$stats
data$stats$average_price
data$avg_price <- data$stats$average_price
data$stats
head(data$stats)
data$listing_count <- data$listing_count
data$listing_count <- data$stats$listing_count
min(data$listing_count)
data$stats$listing_count
data$listing_count <- data$stats$listing_count
data$listing_count
min(data$listing_coount)
min(data$listing_count)
data$stats$listing_count
data$listing_count <- unlist(data$stats$listing_count)
data$listing_count
df$game_date <- as.Date(data$datetime_local)
df$avg_price <- data$stats$average_price
df$listing_count <- unlist(data$stats$listing_count)
df <- data.frame(as.Date(data$datetime_local),
unlist(data$stats$average_price),
unlist(data$stats$listing_count)
)
head(df)
head(data)
df <- data.frame(as.Date(data$datetime_local),
unlist(data$stats$average_price),
unlist(data$stats$listing_count),
data$title
)
head(df)
df$home_team <- noquote(strsplit(df$data.title, " at ")[[2]])
strsplit(df$data.title, " at ")
df$data.title
strsplit(df$data.title, " at ")
require(reshape)
strsplit(df$data.title, " at ",fixed=TRUE)
strsplit(df$data.title, ' at ',fixed=TRUE)
strsplit(as.character(df$data.title), ' at ')
df$home_team <- noquote(strsplit(as.character(df$data.title), ' at ')[[2]])
head(df)
head(df$home_team)
df$home_team <- noquote(strsplit(as.character(df$data.title), ' at ')[[,2]])
df$home_team <- noquote(strsplit(as.character(df$data.title), ' at ')[[2,]])
strsplit(as.character(df$data.title), ' at ')[[2]]
strsplit(as.character(df$data.title), ' at ')[[,2]]
strsplit(as.character(df$data.title), ' at ')[[2,]]
strsplit(as.character(df$data.title), ' at ')[[1]]
strsplit(as.character(df$data.title), ' at ')[[1]][[2]]
df$home_team <- noquote(strsplit(as.character(df$data.title), ' at ')[[1]][[2]] )
head(df)
df$home_team <- noquote(strsplit(as.character(df$data.title), ' at ')[[0]][[2]] )
df$home_team <- noquote(strsplit(as.character(df$data.title), ' at ')[[,]][[2]] )
df$home_team <- noquote(strsplit(as.character(df$data.title), ' at ')[[,2]] )
df$home_team <- noquote(strsplit(as.character(df$data.title), ' at ')[,2] )
df$home_team <- noquote(strsplit(as.character(df$data.title), ' at ')[2] )
head(df)
df$home_team <- noquote(strsplit(as.character(df$data.title), ' at ')[2,] )
df$home_team <- noquote(strsplit(as.character(df$data.title), ' at ')[[1]][2])
head(df)
df$home_team <- noquote(strsplit(as.character(df$data.title), ' at ')[[1]],2)
gsub("([A-Za-z]+).* at ([A-Za-z]+).*", "\\2", df$data.title)
gsub("([A-Za-z ]+).* at ([A-Za-z ]+).*", "\\2", df$data.title)
df$home_team <- gsub("([A-Za-z ]+).* at ([A-Za-z ]+).*", "\\2", df$data.title)
head(df)
colnames(df) <- c('date','avg_price','count','game','home_team')
min(df$count)
df$count
df <- subset(df,!is.na(df$count))
min(df)
df <- data.frame(as.Date(data$datetime_local),
as.numeric(as.character(unlist(data$stats$average_price))),
as.numeric(as.character(unlist(data$stats$listing_count))),
data$title
)
#df$home_team <- noquote(strsplit(as.character(df$data.title), ' at ')[[1]])
df$home_team <- gsub("([A-Za-z ]+).* at ([A-Za-z ]+).*", "\\2", df$data.title)
colnames(df) <- c('date','avg_price','count','game','home_team')
df <- subset(df,!is.na(df$count))
head(df)
min(df)
min(df$avg_price)
head(df$count)
min(df$count)
head(df)
price <- as.data.frame(xtabs(df,formula=avg_price~home_team)/xtabs(df,formula=~home_team))
price
xtabs(df,formula=~home_team)
as.data.frame(xtabs(df,formula=avg_price~home_team)/xtabs(df,formula=~home_team))
as.data.frame(xtabs(df,formula=~home_team))
price <- merge(as.data.frame(xtabs(df,formula=avg_price~home_team)/xtabs(df,formula=~home_team)),
as.data.frame(xtabs(df,formula=~home_team)), by="Freq")
head(price)
price <- merge(as.data.frame(xtabs(df,formula=avg_price~home_team)/xtabs(df,formula=~home_team)),
as.data.frame(xtabs(df,formula=~home_team)), by="home_team")
head(price)
colnames(price)<-c('home_team','Avg_Price','Count')
head(price)
price
price <- subset(price,Count>1)
price
df
data$title
df$home_team <- gsub("(.+).* at (.+).*", "\\2", df$data.title)
df$home_team <- gsub("(*+).* at (*+).*", "\\2", df$data.title)
df$home_team <- gsub("(.*).* at (.*).*", "\\2", df$data.title)
gsub("(.*).* at (.*).*", "\\2", df$data.title)
gsub("(.*) at (.*)", "\\2", df$data.title)
df$home_team <- gsub("([A-Za-z0-9 ]+).* at ([A-Za-z0-9 ]+).*", "\\2", df$data.title)
df <- data.frame(as.Date(data$datetime_local),
as.numeric(as.character(unlist(data$stats$average_price))),
as.numeric(as.character(unlist(data$stats$listing_count))),
data$title
)
df$home_team <- gsub("([A-Za-z0-9 ]+).* at ([A-Za-z0-9 ]+).*", "\\2", df$data.title)
df
colnames(df) <- c('date','avg_price','count','game','home_team')
df <- subset(df,!is.na(df$count))
price <- merge(as.data.frame(xtabs(df,formula=avg_price~home_team)/xtabs(df,formula=~home_team)),
as.data.frame(xtabs(df,formula=~home_team)), by="home_team")
colnames(price)<-c('home_team','Avg_Price','Count')
price <- subset(price,Count>1)
price
rawStandings <- fromJSON('http://www.basketball-reference.com/leagues/NBA_2016_standings.html#expanded_standings::none')
rawStandings <- "1,Golden State Warriors,73-9
2,San Antonio Spurs,67-15
3,Cleveland Cavaliers,57-25
4,Toronto Raptors,56-26
5,Oklahoma City Thunder,55-27
6,Los Angeles Clippers,53-29
7,Atlanta Hawks,48-34
8,Boston Celtics,48-34
9,Charlotte Hornets,48-34
10,Miami Heat,48-34
11,Indiana Pacers,45-37
12,Detroit Pistons,44-38
13,Portland Trail Blazers,44-38
14,Dallas Mavericks,42-40
15,Memphis Grizzlies,42-40
16,Chicago Bulls,42-40
17,Houston Rockets,41-41
18,Washington Wizards,41-41
19,Utah Jazz,40-42
20,Orlando Magic,35-47
21,Denver Nuggets,33-49
22,Milwaukee Bucks,33-49
23,Sacramento Kings,33-49
24,New York Knicks,32-50
25,New Orleans Pelicans,30-52
26,Minnesota Timberwolves,29-53
27,Phoenix Suns,23-59
28,Brooklyn Nets,21-61
29,Los Angeles Lakers,17-65
30,Philadelphia 76ers,10-72"
head(rawStanding)
head(rawStandings)
standings<-read.delim(textConnection(rawStandings),header=FALSE,sep=",",strip.white=TRUE)
head(standings)
colnames(standings) <- c('rank','home_team','winloss')
strsplit(standings$winloss), '-')
strsplit(standings$winloss, '-')
strsplit(as.character(standings$winloss), '-')
strsplit(as.character(standings$winloss), '-')[1]
strsplit(as.character(standings$winloss), '-')[,2]
unlist(strsplit(as.character(standings$winloss), '-'))
flatten(strsplit(as.character(standings$winloss), '-'))
unlist(strsplit(as.character(standings$winloss), '-'))
standings$wins <- gsub("([0-9]+)-([0-9]+)", "\\1", standings$winloss)
head(standings$wins)
standings$wins <- as.numeric(gsub("([0-9]+)-([0-9]+)", "\\1", standings$winloss))
head(standings$wins)
standings$losses <- as.numeric(gsub("([0-9]+)-([0-9]+)", "\\2", standings$winloss)))
standings$losses <- as.numeric(gsub("([0-9]+)-([0-9]+)", "\\2", standings$winloss))
standings$winrate <- standings$wins/(standings$wins+standings$losses)
head(standings)
head(price)
merged <- merge(price,standings,by="home_team")
merged
ggplot(merged,aes(x=wins,y=Avg_Price)) + geom_point(size=3,alpha=0.5)+
xlab('2015-16 Wins') + ylab('Current Avg Ticket Price')
require(ggplot2)
ggplot(merged,aes(x=wins,y=Avg_Price)) + geom_point(size=3,alpha=0.5)+
xlab('2015-16 Wins') + ylab('Current Avg Ticket Price')
ggplot(merged,aes(x=wins,y=Avg_Price)) + geom_point(size=3,alpha=0.5)+
xlab('2015-16 Wins') + ylab('Current Avg Ticket Price') +
geom_smooth(method="lm")
ggplot(merged,aes(x=wins,y=Avg_Price)) + geom_point(size=3,alpha=0.5)+
xlab('2015-16 Wins') + ylab('Current Avg Ticket Price') +
geom_smooth(method="lm",se=FALSE) + ggtitle('Ticket Price in 2016-17 vs 2015-16 wins')
head(merged)
ggplot(merged,aes(x=wins,y=Avg_Price,color=Count)) + geom_point(size=3,alpha=0.5)+
xlab('2015-16 Wins') + ylab('Avg Upcoming Ticket Price') +
geom_smooth(method="lm",se=FALSE) + ggtitle('NBA Ticket Price in 2016-17 vs 2015-16 wins')
ggplot(merged,aes(x=wins,y=Avg_Price)) + geom_point(size=3,alpha=0.5)+
xlab('2015-16 Wins') + ylab('Avg Upcoming Ticket Price') +
geom_smooth(method="lm",se=FALSE) + ggtitle('NBA Ticket Price in 2016-17 vs 2015-16 wins')
ggplot(merged,aes(x=wins,y=Avg_Price)) + geom_point(size=3,alpha=0.5)+
xlab('2015-16 Wins') + ylab('Avg Upcoming Ticket Price') +
geom_smooth(method="lm",se=TRUE) + ggtitle('NBA Ticket Price in 2016-17 vs 2015-16 wins')
model <- glm(merged$Avg_Price~merged$wins)
summary(model)
merged
df <- data.frame(as.Date(data$datetime_local),
as.numeric(as.character(unlist(data$stats$average_price))),
as.numeric(as.character(unlist(data$stats$listing_count))),
data$title
)
df$home_team <- gsub("([A-Za-z0-9 ]+).* at ([A-Za-z0-9 ]+).*", "\\2", df$data.title)
df$visiting_team <- gsub("([A-Za-z0-9 ]+).* at ([A-Za-z0-9 ]+).*", "\\1", df$data.title)
colnames(df) <- c('date','avg_price','count','game','home_team','visiting_team')
df <- subset(df,!is.na(df$count))
head(df)
df
headdf
head(df)
df$gsw_visiting <-ifelse(df$visiting_team=='Golden State Warriors',1,0)
tail(df)
tail(df,n=20)
tail(df,n=40)
tail(df,n=50)
tail(df,n=70)
nogsw <- subset(df,home_team!='Golden State Warriors')
xtabs(nogsw,formula=avg_price~home_team+gsw_visiting)
xtabs(nogsw,formula=avg_price~home_team+gsw_visiting)/xtabs(df,formula=~home_team+gsw_visiting))
xtabs(subset(nogsw,gsw_visiting==0),formula=avg_price~home_team)/xtabs(df,formula=~home_team))
xtabs(subset(nogsw,gsw_visiting==0),formula=avg_price~home_team)/xtabs(df,formula=~home_team)
xtabs(subset(nogsw,gsw_visiting==0),formula=avg_price~home_team)/xtabs(subset(nogsw,gsw_visiting==0),formula=~home_team)
as.data.frame(xtabs(subset(nogsw,gsw_visiting==0),formula=avg_price~home_team)/xtabs(subset(nogsw,gsw_visiting==0),formula=~home_team))
merge(as.data.frame(xtabs(subset(nogsw,gsw_visiting==0),formula=avg_price~home_team)/xtabs(subset(nogsw,gsw_visiting==0),formula=~home_team)),
as.data.frame(xtabs(subset(nogsw,gsw_visiting==0),formula=~home_team)),by="home_team")
price <- merge(merge(merge(
as.data.frame(xtabs(subset(nogsw,gsw_visiting==0),formula=avg_price~home_team)/xtabs(subset(nogsw,gsw_visiting==0),formula=~home_team)),
as.data.frame(xtabs(subset(nogsw,gsw_visiting==0),formula=~home_team)),by="home_team"),
as.data.frame(xtabs(subset(nogsw,gsw_visiting==1),formula=avg_price~home_team)/xtabs(subset(nogsw,gsw_visiting==0),formula=~home_team)),by="home_team"),
as.data.frame(xtabs(subset(nogsw,gsw_visiting==1),formula=~home_team)),by="home_team")
price <- merge(merge(merge(
as.data.frame(xtabs(subset(nogsw,gsw_visiting==0),formula=avg_price~home_team)/xtabs(subset(nogsw,gsw_visiting==0),formula=~home_team)),
as.data.frame(xtabs(subset(nogsw,gsw_visiting==0),formula=~home_team)),by="home_team"),
as.data.frame(xtabs(subset(nogsw,gsw_visiting==1),formula=avg_price~home_team)/xtabs(subset(nogsw,gsw_visiting==1),formula=~home_team)),by="home_team"),
as.data.frame(xtabs(subset(nogsw,gsw_visiting==1),formula=~home_team)),by="home_team")
price
colnames(price) <- c('home_team','avg_no_gsw','num_no_gsw','avg_yes_gsw','num_yes_gsw')
price_2 <- melt(price, id.vars=c("home_team"),measure.vars=c("avg_no_gsw","num_yes_gsw"))
require(reshape2)
price_2 <- melt(price, id.vars=c("home_team"),measure.vars=c("avg_no_gsw","num_yes_gsw"))
head(price_2)
tail(price_2)
price_2 <- melt(price, id.vars=c("home_team"),measure.vars=c("avg_no_gsw","avg_yes_gsw"))
ggplot(price_2,aes(x=home_team,y=value,color=variable)) + geom_point(size=3,alpha=0.5)+
xlab('NBA Team') + ylab('Avg Upcoming Ticket Price')
ggplot(price_2,aes(x=home_team,y=value,color=variable)) + geom_point(size=3,alpha=0.5)+
xlab('NBA Team') + ylab('Avg Upcoming Ticket Price') +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
ggplot(price_2,aes(x=home_team,y=value,color=variable)) + geom_point(size=4,alpha=0.5)+
xlab('NBA Team') + ylab('Avg Upcoming Ticket Price') +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
ggtitle('Ticket price when GSW visits') +
scale_color_discrete('GSW Visiting')
colnames(price) <- c('home_team','other_visitor','num_no_gsw','GSW_visitor','num_yes_gsw')
price_2 <- melt(price, id.vars=c("home_team"),measure.vars=c("avg_no_gsw","avg_yes_gsw"))
ggplot(price_2,aes(x=home_team,y=value,color=variable)) + geom_point(size=4,alpha=0.5)+
xlab('NBA Team') + ylab('Avg Upcoming Ticket Price') +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
ggtitle('Ticket price when GSW visits') +
scale_color_discrete('GSW Visiting')
price_2 <- melt(price, id.vars=c("home_team"),measure.vars=c("other_visitor","GSW_visitor"))
ggplot(price_2,aes(x=home_team,y=value,color=variable)) + geom_point(size=4,alpha=0.5)+
xlab('NBA Team') + ylab('Avg Upcoming Ticket Price') +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
ggtitle('Ticket price when GSW visits') +
scale_color_discrete('GSW Visiting')
ggplot(price_2,aes(x=home_team,y=value,color=variable)) + geom_point(size=4,alpha=0.5)+
xlab('NBA Team') + ylab('Avg Upcoming Ticket Price') +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
ggtitle('Ticket price when GSW visits') +
scale_color_discrete('')
colnames(price) <- c('home_team','Other_visitor','num_no_gsw','GSW_visitor','num_yes_gsw')
price_2 <- melt(price, id.vars=c("home_team"),measure.vars=c("Other_visitor","GSW_visitor"))
ggplot(price_2,aes(x=home_team,y=value,color=variable)) + geom_point(size=4,alpha=0.5)+
xlab('NBA Team') + ylab('Avg Upcoming Ticket Price') +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
ggtitle('Ticket price when GSW visits') +
scale_color_discrete('')
price_2
head(price)
price_2
head(price)
mean(price$Other_visitor)
mean(price$GSW_visitor)
wget_url <- "http://www.gutenberg.org/robot/harvest?filetypes[]=txt"
lines <- readr::read_lines(wget_url)
install.packages('readr')
lines <- readr::read_lines(wget_url)
head(lines)
a <- lines[stringr::str_detect(lines, stringr::fixed("<a href="))][1]
a
mirror_full_url <- stringr::str_match(a, "href=\"(.*?)\"")[2]
mirror_full_url
parsed <- urltools::url_parse(mirror_full_url)
install.packages('urltools')
parsed <- urltools::url_parse(mirror_full_url)
mirror <- paste0(parsed$scheme, "://", parsed$domain)
mirror
id<-'25110'
path <- id %>%
stringr::str_sub(1, -2) %>%
stringr::str_split("") %>%
sapply(stringr::str_c, collapse = "/")
path <- id %>%
stringr::str_sub(1, -2) %>%
stringr::str_split("") %>%
sapply(stringr::str_c, collapse = "/")
stringr::str_sub(1, -2)
stringr::str_sub(id, -2)
id
stringr::str_sub(id, -2)
path <- id
full_url <- stringr::str_c(mirror, path, id,
stringr::str_c(id, ".zip"),
sep = "/")
full_url
stringr::str_sub(id,1, -2)
id
stringr::str_split(2511,"")
a <- stringr::str_sub(id,1, -2)
b <- stringr::str_split(b,"")
a <- stringr::str_sub(id,1, -2)
b <- stringr::str_split(a,"")
c <- sapply(b, stringr::str_c, collapse = "/")
b
c
id
c
full_url <- stringr::str_c(mirror, path, id,
stringr::str_c(id, ".zip"),
sep = "/")
full_url
path <- sapply(b, stringr::str_c, collapse = "/")
full_url <- stringr::str_c(mirror, path, id,
stringr::str_c(id, ".zip"),
sep = "/")
full_url
stringr::str_sub(id,1, -1)
stringr::str_sub(id,1, -1)
stringr::str_sub(id,1, -2)
nchar(id)
install.packages("Quandl")
library(Quandl)
install.packages("Quandl")
install.packages("Quandl")
setwd("/home/jason/")
library(ggplot2)
df = read.table("temp.csv", header=TRUE, sep=",", quote='', nrows=250000)
head(df)
ggplot(df,aes(x="prediction",y="overtime")) +
xlab('Predicted Home Win Probability') +
ylab('Overtime Frequency')+ggtitle('Relationship between NBA win probability and OT') +
scale_y_continuous(limits=[0.,0.2])+scale_x_continuous(limits=[0.,1.]) +
stat_smooth(method='loess',se=FALSE)
ggplot(df,aes(x="prediction",y="overtime")) +
xlab('Predicted Home Win Probability') +
ylab('Overtime Frequency')+ggtitle('Relationship between NBA win probability and OT') +
xlim(c(0,1))+ylim(c(0,0.25))+
stat_smooth(method='loess',se=FALSE)
head(df)
df$overtime
ggplot(df,aes(x="prediction",y="overtime")) +
xlab('Predicted Home Win Probability') +
ylab('Overtime Frequency')+ggtitle('Relationship between NBA win probability and OT') +
xlim(c(0,1))+#ylim(c(0,0.25))+
stat_smooth(method='loess',se=FALSE)
ggplot(df,aes(x="prediction",y="overtime")) +
xlab('Predicted Home Win Probability') +
ylab('Overtime Frequency')+ggtitle('Relationship between NBA win probability and OT') +
xlim(c(0,1))+#ylim(c(0,0.25))+
geom_point()
ggplot(df,aes(x=prediction,y=overtime)) +
xlab('Predicted Home Win Probability') +
ylab('Overtime Frequency')+ ggtitle('Relationship between NBA win probability and OT') +
xlim(c(0,1))+#ylim(c(0,0.25))+
geom_point()
ggplot(df,aes(x=prediction,y=overtime)) +
xlab('Predicted Home Win Probability') +
ylab('Overtime Frequency')+ ggtitle('Relationship between NBA win probability and OT') +
xlim(c(0,1))+#ylim(c(0,0.25))+
stat_smooth(method='loess',se=FALSE)
ggplot(df,aes(x=prediction,y=overtime)) +
xlab('Predicted Home Win Probability') +
ylab('Overtime Frequency')+ ggtitle('Relationship between NBA win probability and OT') +
xlim(c(0,1))+#ylim(c(0,0.25))+
stat_smooth(method='loess',se=TRUE)
setwd('/home/jason/twitter_party/data')
library(reshape2)
library(GGally)
library(network)
library(sna)
library(ggplot2)
# row.names = 1,
df = read.table("dataframe.csv", header=TRUE, sep=",", quote='', nrows=100)
df.l <- df[,1:100]
# need to rearrange the file.
df.m <- melt(df.l,id.vars="X")
df.m2 <- subset(df.m,value>0)
df.m3 <- df.m2[,c("X","variable")]
df.m4 <- merge(df.m3,df.m3,by="X")
df.m5 <- subset(df.m4,variable.x!=variable.y)[,2:3]
rm(df.m,df.m2,df.m3,df.m4)
# following - https://briatte.github.io/ggnet/
net = network(df.m5, directed = FALSE)
# network plot
ggnet2(net, alpha = 0.75, size = 4, edge.alpha = 0.5,
label = c("POTUS", "AshleyWarrior","TheDemCoalition"),
label.size = 6,label.color='brown') +
ggtitle('Clustering of Political Twitter Accounts by Followers')
ggnet2(net, alpha = 0.5, size = 3, edge.alpha = 0.25,
label=TRUE,
#label = c("POTUS","TheDemCoalition"),
label.size = 6,label.color='brown') +
ggtitle('Clustering of Political Twitter Accounts by Followers')
# network plot
ggnet2(net, alpha = 0.5, size = 3, edge.alpha = 0.25,
#label=TRUE,
label = c("POTUS","hardball","AriMelber","WhoopiGoldberg","GlennThrush","TheDemCoalition"),
label.size = 6,label.color='brown') +
ggtitle('Clustering of Political Twitter Accounts by Followers')
View(df)
ggnet2(net, alpha = 0.5, size = 3, edge.alpha = 0.25,
label=TRUE,
#label = c("POTUS","TheOnion","SarahPalinUSA","hardball","AriMelber","WhoopiGoldberg","GlennThrush","TheDemCoalition"),
label.size = 6,label.color='brown') +
ggtitle('Clustering of Political Twitter Accounts by Followers')
ggnet2(net, alpha = 0.5, size = 3, edge.alpha = 0.25,
label=TRUE, label.size = 2,label.color='blue'
#label = c("Eugene_Robinson","POTUS","TheOnion","SarahPalinUSA","hardball","AriMelber","WhoopiGoldberg","GlennThrush","TheDemCoalition"),
) +
ggtitle('Clustering of Political Twitter Accounts by Followers')
# network plot
ggnet2(net, alpha = 0.5, size = 3, edge.alpha = 0.25,
label=TRUE, label.size = 3,label.color='blue'
#label = c("Eugene_Robinson","POTUS","TheOnion","SarahPalinUSA","hardball","AriMelber","WhoopiGoldberg","GlennThrush","TheDemCoalition"),
) +
ggtitle('Clustering of Political Twitter Accounts by Followers')
# network plot
ggnet2(net, alpha = 0.5, size = 3, edge.alpha = 0.25,
#label=TRUE, label.size = 3,label.color='blue'
label = c("Eugene_Robinson","POTUS","TheOnion","SarahPalinUSA","hardball","AriMelber","WhoopiGoldberg","GlennThrush","TheDemCoalition"),
label.size = 5,label.color='blue') +
ggtitle('Clustering of Political Twitter Accounts by Followers')
